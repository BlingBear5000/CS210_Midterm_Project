#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <unordered_map>
#include "timer.h"

using namespace std;

class CSVReader {
public:
    static vector<vector<string>> readCSV(const string& filename) {
        ifstream file(filename);
        vector<vector<string>> data;
        string line, word;

        if (!file.is_open()) {
            cerr << "Error: Could not open file " << filename << endl;
            return data;
        }

        while (getline(file, line)) {
            stringstream ss(line);
            vector<string> row;
            while (getline(ss, word, ',')) {
                row.push_back(word);
            }
            data.push_back(row);
        }
        file.close();
        return data;
    }
};

struct SchoolTreeNode {
    string name;
    string address;
    string city;
    string state;
    string county;
    SchoolTreeNode* left;
    SchoolTreeNode* right;
    SchoolTreeNode(string n, string a, string c, string s, string co) : name(n), address(a), city(c), state(s), county(co), left(nullptr), right(nullptr) {}
};
class SchoolBST {
private:
    SchoolTreeNode* root = nullptr;

    SchoolTreeNode* insertSchoolNode(SchoolTreeNode* node, SchoolTreeNode s) {
        if (node == nullptr) return new SchoolTreeNode(s);
        if (s.name < node->name) node->left = insertSchoolNode(node->left, s);
        else node->right = insertSchoolNode(node->right, s);
        return node;
    }
    SchoolTreeNode* deleteNode(SchoolTreeNode* school, string name) {
        if (school == nullptr) return school;
        if (name < school->name) {
            school->left = deleteNode(school->left, name);
        } else if (name > school->name) {
            school->right = deleteNode(school->right, name);
        } else {
            if (school->left == nullptr) {
                SchoolTreeNode* temp = school->right;
                delete school;
                return temp;
            }
            if (school->right == nullptr) {
                SchoolTreeNode* temp = school->left;
                delete school;
                return temp;
            }
            SchoolTreeNode* temp = school->right;
            while (temp->left != nullptr) {
                temp = temp->left;
            }
            root->name = temp ->name;
            root->address = temp -> address;
            root->city = temp -> city;
            root->state = temp -> state;
            root->county = temp -> county;
            root->right = deleteNode(school->right, temp->name);
        }
        return school;
    }
    SchoolTreeNode* findNode(SchoolTreeNode* node, string name) {
        if (node == nullptr) return node;
        if (node->name == name) {
            return node;
        }
        return (name < node->name) ? findNode(node->left, name) : findNode(node->right, name);
    }
public:
    void insertSchool(SchoolTreeNode school) {
        root = insertSchoolNode(root, school);
    }
    void deleteByName(string name) {
        deleteNode(root, name);
    }
    string findByName(string name) {
        SchoolTreeNode* s = findNode(root, name);
        return s->name + ", " + s->address + ", " + s->city + ", " + s->state + ", " + s->county;
    }
};

struct SchoolHashNode {
    string name;
    string address;
    string city;
    string state;
    string county;
    SchoolHashNode(string n, string a, string c, string s, string co) : name(n), address(a), city(c), state(s), county(co) {}
};

int hashFunction(string key, int tableSize) {
    int hash = 0;
    for (char ch : key) {
        hash += ch;
    }
    return hash % tableSize;
}

class SchoolHashTable {
private:
    unordered_map<int, SchoolHashNode*> table;
public:
    void insert(SchoolHashNode school) {
        SchoolHashNode* p = new SchoolHashNode(school);
        table[hashFunction(school.name, 200000)] = p;
    }
    void deleteByName(string name) {
        int key = hashFunction(name, 200000);
        delete table[key];
        table.erase(key);
    }
    string findByName(string name) {
        SchoolHashNode* temp = table[hashFunction(name, 200000)];
        if (temp == nullptr) {
            return "School not found\n";
        }
        return "name: " + temp->name + "\naddress: " + temp->address + "\ncity: " + temp->city + "\nstate: " + temp->state + "\ncounty: " + temp->county + "\n";
    }
};

struct SchoolListNode {
    string name;
    string address;
    string city;
    string state;
    string county;
    SchoolListNode* next;
    SchoolListNode(string n, string a, string c, string s, string co) : name(n), address(a), city(c), state(s), county(co), next(nullptr) {}
};

class SchoolList {
    SchoolListNode* head;
    SchoolListNode* tail;
    public:
    SchoolList() : head(nullptr), tail(nullptr) {}
    void insertFirst(SchoolListNode* school) {
        if (head == nullptr) {
            head = school;
            tail = school;
            return;
        }
        school->next = head;
        head = school;
    }
    void deleteByName(string name) {
        if (head == nullptr) {
            return;
        }
        if (head->name == name) {
            head = head->next;
        }
        else {
            SchoolListNode* temp = head;
            while (temp->next != nullptr) {
                if (temp->next->name == name) {
                    delete temp->next;
                    temp->next = temp->next->next;
                }
                temp = temp->next;
            }
            tail = temp;
        }
    }
    string findByName(string name) {
        if (head == nullptr) {
            return "list is empty";
        }
        if (head->name == name) {
            return head->name + ", " + head->address + ", " + head->city + ", " + head->state + ", " + head->county + "\n";
        }
        SchoolListNode* temp = head;
        while (temp->next != nullptr) {
            if (temp->next->name == name) {
                return temp->next->name + ", " + temp->next->address + ", " + temp->next->city + ", " + temp->next->state + ", " + temp->next->county + "\n";
            }
            temp = temp->next;
        }
    }
};

int main() {
    Timer t;
    SchoolBST schoolTree;
    SchoolList schoolList;
    SchoolHashTable schoolTable;

    CSVReader reader;
    vector<vector<string>> PeoriaSchools = reader.readCSV("Illinois_Peoria_Schools.csv");
    vector<vector<string>> IllinoisSchools = reader.readCSV("Illinois_Schools.csv");
    vector<vector<string>> UsaSchools = reader.readCSV("USA_Schools.csv");
    vector sets = {PeoriaSchools, IllinoisSchools, UsaSchools};
    string file = "timings.csv";
    ofstream outFile(file);
    if (!outFile.is_open())
    {
        cerr << "Failed to open timings.csv for writing.\n";
        return 1;
    }
    outFile << "dataset, function, time (microseconds),\n";
    int iterator = 0;
    for (vector dataset : sets) {
        for (int j = 0; j < 3; j++) {
            auto start_Insert = chrono::high_resolution_clock::now();
            for (int i = 1; i < dataset.size(); i++) {
                string n = dataset[i][0];
                string a = dataset[i][1];
                string c = dataset[i][2];
                string s = dataset[i][3];
                string co;
                try {
                    co = dataset[i][4];
                } catch (exception& e) {
                    co = "";
                }
                if (j == 0) {
                    SchoolTreeNode temp(n, a, c, s, co);
                    schoolTree.insertSchool(temp);
                }
                if (j == 1) {
                    SchoolHashNode temp(n, a, c, s, co);
                    schoolTable.insert(temp);
                }
                if (j == 2) {
                    SchoolListNode* temp = new SchoolListNode(n, a, c, s, co);
                    schoolList.insertFirst(temp);
                }
            }
            auto end_Insert = chrono::high_resolution_clock::now();
            double brute_time = chrono::duration<double, micro>(end_Insert - start_Insert).count();
            string setName;
            string insertName;
            if (iterator == 0) {setName = "Illinois_Peoria_Schools";}
            if (iterator == 1) {setName = "Illinois_Schools";}
            if (iterator == 2) {setName = "USA_Schools";}
            if (j == 0) {insertName = "BST insert";}
            if (j == 1) {insertName = "Hash Table insert";}
            if (j == 2) {insertName = "Linked List insert";}
            outFile << setName + ", " + insertName + ", " << brute_time << "\n";
        }

        int random = rand()%130;
        for (int j = 0; j < 3; j++) {
            auto start_search = chrono::high_resolution_clock::now();
            if (j == 0) {
                string s = schoolTree.findByName(dataset[random][0]);
            }
            if (j == 1) {
                string s = schoolTable.findByName(dataset[random][0]);
            }
            if (j == 2) {
                string s = schoolList.findByName(dataset[random][0]);
            }
            auto end_search = chrono::high_resolution_clock::now();
            double brute_time = chrono::duration<double, micro>(end_search - start_search).count();
            string setName;
            string insertName;
            if (iterator == 0) {setName = "Illinois_Peoria_Schools";}
            if (iterator == 1) {setName = "Illinois_Schools";}
            if (iterator == 2) {setName = "USA_Schools";}
            if (j == 0) {insertName = "BST search";}
            if (j == 1) {insertName = "Hash Table search";}
            if (j == 2) {insertName = "Linked List search";}
            outFile << setName + ", " + insertName + ", " << brute_time << "\n";

        }

        iterator++;
    }


    outFile.close();
    cout << "Timings saved to " << file << endl;
    return 0;
}
