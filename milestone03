#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>

using namespace std;

class CSVReader {
public:
    static vector<vector<string>> readCSV(const string& filename) {
        ifstream file(filename);
        vector<vector<string>> data;
        string line, word;

        if (!file.is_open()) {
            cerr << "Error: Could not open file " << filename << endl;
            return data;
        }

        while (getline(file, line)) {
            stringstream ss(line);
            vector<string> row;
            while (getline(ss, word, ',')) {
                row.push_back(word);
            }
            data.push_back(row);
        }
        file.close();
        return data;
    }
};

struct School {
    string name;
    string address;
    string city;
    string state;
    string county;
    School* left;
    School* right;
    School(string n, string a, string c, string s, string co) : name(n), address(a), city(c), state(s), county(co), left(nullptr), right(nullptr) {}
};

class SchoolBST {
private:
    School* root = nullptr;

    School* insertSchoolNode(School* node, School s) {
        if (node == nullptr) return new School(s);
        if (s.name < node->name) node->left = insertSchoolNode(node->left, s);
        else node->right = insertSchoolNode(node->right, s);
        return node;
    }
    School* findNode(School* node, string name) {
        if (node == nullptr || node->name == name) return node;
        return (name < node->name) ? findNode(node->left, name) : findNode(node->right, name);
    }
    void preOrderTraversal(School* node) {
        if (node == nullptr) return;
        cout << node->name << ", ";
        preOrderTraversal(node->left);
        preOrderTraversal(node->right);
    }
    void inOrderTraversal(School* node) {
        if (node == nullptr) return;
        inOrderTraversal(node->left);
        cout << node->name << ", ";
        inOrderTraversal(node->right);
    }
    void postOrderTraversal(School* node) {
        if (node == nullptr) return;
        postOrderTraversal(node->left);
        postOrderTraversal(node->right);
        cout << node->name << ", ";
    }

public:
    void insertSchool(School school) {
        root = insertSchoolNode(root, school);
    }
    void findByName(string name) {
        School* s = findNode(root, name);
        cout << s->name << ", " << s->address << ", " << s->city << ", " << s->state << ", " << s->county << endl;
    }
    void displayPreOrder() {
        cout << "Pre-order Traversal: ";
        preOrderTraversal(root);
        cout << endl;
    }
    void displayInOrder() {
        cout << "In-order Traversal: ";
        inOrderTraversal(root);
        cout << endl;
    }
    void displayPostOrder() {
        cout << "Post-order Traversal: ";
        postOrderTraversal(root);
        cout<<endl;
    }

};


int main() {
    SchoolBST tree;
    CSVReader reader;
    vector<vector<string>> schools = reader.readCSV("Illinois_Peoria_Schools.csv");
    for (int i = 1; i < schools.size(); i++) {
        string n = schools[i][0];
        string a = schools[i][1];
        string c = schools[i][2];
        string s = schools[i][3];
        string co = schools[i][4];
        School temp(n, a, c, s, co);
        tree.insertSchool(temp);
    }

    return 0;
}
